/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        btlayer {
            bindings = <&lt 2 LC(LEFT_SHIFT)>;
            key-positions = <39 41>;
            require-prior-idle-ms = <0>;
            layers = <0 1 2>;
        };

        sk1 {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <7 8>;
            layers = <0 1 2>;
        };

        sk2 {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
            layers = <0 1 2>;
        };

        pl {
            bindings = <&kp EQUAL>;
            key-positions = <20 21>;
            layers = <0 1 2>;
        };

        mn {
            bindings = <&kp MINUS>;
            key-positions = <21 22>;
            layers = <0 1 2>;
        };

        block {
            bindings = <&kp LG(L)>;
            key-positions = <0 13>;
            layers = <0 1 2>;
        };

        terminal {
            bindings = <&kp LA(LC(T))>;
            key-positions = <41 42>;
        };

        slsh {
            bindings = <&kp NON_US_BACKSLASH>;
            key-positions = <11 10>;
            layers = <0 1 2>;
        };

        kskb1 {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <32 33>;
            layers = <0 1 2>;
        };

        kskb2 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <33 34>;
            layers = <0 1 2>;
        };

        Ctrlshift {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <31 30>;
            layers = <0 1 2>;
        };

        Ctrlspace {
            bindings = <&kp LC(SPACE)>;
            key-positions = <30 29>;
            layers = <0 1 2>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <12 11>;
            layers = <1 0 3 4>;
        };
    };

    behaviors {
        copypast: copypast {
            compatible = "zmk,behavior-tap-dance";
            label = "COPYPAST";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp LC(LS(C))>, <&kp LC(RS(V))>;
        };

        cpst: cpst {
            compatible = "zmk,behavior-tap-dance";
            label = "CPST";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LC(C)>, <&kp LC(V)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 4 ESCAPE  &lt 3 ESC       &kp Q           &kp W           &kp E              &kp R          &kp T        &kp Y        &kp U        &kp I              &kp O              &kp P                    &kt LEFT_BRACKET  &kp DEL
              &lt 1 TAB       &mt LEFT_WIN A  &mt LEFT_ALT S  &mt LEFT_SHIFT D   &mt LCTRL F    &kp G        &kp H        &mt RCTRL J  &mt RIGHT_SHIFT K  &mt RIGHT_ALT L    &mt RIGHT_GUI SEMICOLON  &mt SQT SQT
              &kp LEFT_SHIFT  &kp Z           &kp X           &kp C              &kp V          &kp B        &kp N        &kp M        &kp COMMA          &kp DOT            &kp FSLH                 &kp RIGHT_SHIFT
                                              &kp ESCAPE      &kp LC(BACKSPACE)  &kp BACKSPACE  &lt 3 DEL    &lt 1 ENTER  &kp SPACE    &kp GRAVE          &kp RIGHT_BRACKET
            >;
        };

        lower_layer {
            bindings = <
&kp LEFT_WIN  &kp GRAVE  &trans  &trans  &trans  &trans  &trans    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5        &kp RIGHT_BRACKET     &trans
              &trans     &trans  &trans  &trans  &trans  &trans    &kp LEFT      &kp DOWN      &kp UP_ARROW  &kp RIGHT     &kp LEFT_WIN  &none
              &trans     &trans  &trans  &trans  &trans  &trans    &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0        &kp NON_US_BACKSLASH
                                 &trans  &trans  &trans  &trans    &trans        &trans        &trans        &trans
            >;
        };

        adjust_layer {
            bindings = <
&none  &none       &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &bootloader  &none
       &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
       &sys_reset  &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &sys_reset
                                 &none         &trans        &none         &trans          &trans        &none         &trans        &none
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans     &kp F1     &kp F2       &kp F3         &kp F4     &kp F5       &trans  &trans  &trans  &trans  &trans              &kp DELETE  &trans
        &kp LC(A)  &kp F6     &kp F7       &kp F8         &kp F9     &kp F10      &trans  &trans  &trans  &trans  &trans              &trans
        &trans     &kp LC(Z)  &kp PAGE_UP  &kp PAGE_DOWN  &kp F11    &kp F12      &trans  &trans  &trans  &trans  &kp LC(LS(ESCAPE))  &kp LG(L)
                              &trans       &kp LC(C)      &kp LC(V)  &kp LC(X)    &trans  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans         &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans         &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans         &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &kp LS(LC(C))  &kp LS(LC(V))  &kp LS(LC(X))    &trans  &trans  &trans  &trans
            >;
        };
    };
};
